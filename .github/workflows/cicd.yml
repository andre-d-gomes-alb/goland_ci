name: Test and Build app

# Trigger to run
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  # Test syntax by checking formatting
  lint:
    name: Lint files
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up a go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'
      - name: Lint files
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: latest
   
  # Test Functionality
  test:
    name: Run tests
    runs-on: 'ubuntu-latest'
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up a go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'
      - name: Run tests
        run: go test -v -cover
  
  # Check version
  version:
    name: Check version
    runs-on: 'ubuntu-latest'
    needs: test
    outputs:
      version: ${{ steps.getversion.outputs.version }}
      tag: ${{ steps.gettag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check version
        id: getversion
        run: echo "::set-output name=version::$(cat VERSION)"
      - name: Check latest tag
        id: gettag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"
  
  # Test build stability for Linux and Windows
  build:
    name: Build binary
    runs-on: 'ubuntu-latest'
    needs: version
    strategy:
      matrix:
        goosarch:
          #- 'aix/ppc64'
          # - 'android/386'
          #- 'android/amd64'
          # - 'android/arm'
          #- 'android/arm64'
          #- 'darwin/amd64'
          #- 'darwin/arm64'
          #- 'dragonfly/amd64'
          #- 'freebsd/386'
          #- 'freebsd/amd64'
          #- 'freebsd/arm'
          #- 'freebsd/arm64'
          #- 'illumos/amd64'
          # - 'ios/amd64'
          # - 'ios/arm64'
          #- 'js/wasm'
          #- 'linux/386'
          - 'linux/amd64'
          #- 'linux/arm'
          #- 'linux/arm64'
          #- 'linux/mips'
          #- 'linux/mips64'
          #- 'linux/mips64le'
          #- 'linux/mipsle'
          #- 'linux/ppc64'
          #- 'linux/ppc64le'
          #- 'linux/riscv64'
          #- 'linux/s390x'
          #- 'netbsd/386'
          #- 'netbsd/amd64'
          # 'netbsd/arm'
          #- 'netbsd/arm64'
          #- 'openbsd/386'
          #- 'openbsd/amd64'
          #- 'openbsd/arm'
          #- 'openbsd/arm64'
          #- 'openbsd/mips64'
          #- 'plan9/386'
          #- 'plan9/amd64'
          #- 'plan9/arm'
          #- 'solaris/amd64'
          #- 'windows/386'
          - 'windows/amd64'
          #- 'windows/arm'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up a go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'
      - name: Get os and arch info
        run: |
          GOOSARCH=${{matrix.goosarch}}
          GOOS=${GOOSARCH%/*}
          GOARCH=${GOOSARCH#*/}
          BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH-${{needs.version.outputs.version}}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
      - name: Build binary
        run: |
          go build -o "$BINARY_NAME" -v
          
      # Add binary to release
      - name: Add binary to release
        if: ${{needs.version.outputs.version != needs.version.outputs.tag}}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{needs.version.outputs.version}}
          release_name: ${{needs.version.outputs.version}}
          files: ${{env.BINARY_NAME}}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # Create Release
  release:
    name: Create release
    runs-on: 'ubuntu-latest'
    needs: [build, version]
    if: ${{needs.version.outputs.version != needs.version.outputs.tag}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Release Notes
        run:
          git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
      - name: Release with Notes
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{needs.version.outputs.version}}
          release_name: ${{needs.version.outputs.version}}
          body_path: ".github/RELEASE-TEMPLATE.md"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
